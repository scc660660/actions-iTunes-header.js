/// <reference types="node" />
import * as applicationModule from "./application";
import * as authenticationModule from "./authentication";
import * as busModule from "./bus";
import * as cancellableModule from "./cancellable";
import * as childModule from "./child";
import * as crashModule from "./crash";
import * as deviceManagerModule from "./device_manager";
import * as deviceModule from "./device";
import * as endpointParametersModule from "./endpoint_parameters";
import * as iconModule from "./icon";
import * as iostreamModule from "./iostream";
import * as portalMembershipModule from "./portal_membership";
import * as portalServiceModule from "./portal_service";
import * as processModule from "./process";
import * as relayModule from "./relay";
import * as scriptModule from "./script";
import * as serviceModule from "./service";
import * as sessionModule from "./session";
import * as socketAddressModule from "./socket_address";
import * as spawnModule from "./spawn";
import * as systemParametersModule from "./system_parameters";
export type DeviceManager = deviceManagerModule.DeviceManager;
export declare const DeviceManager: typeof deviceManagerModule.DeviceManager;
export type RemoteDeviceOptions = deviceManagerModule.RemoteDeviceOptions;
export type DeviceAddedHandler = deviceManagerModule.DeviceAddedHandler;
export type DeviceRemovedHandler = deviceManagerModule.DeviceRemovedHandler;
export type DevicesChangedHandler = deviceManagerModule.DevicesChangedHandler;
export type Device = deviceModule.Device;
export declare const Device: typeof deviceModule.Device;
export type ProcessID = deviceModule.ProcessID;
export type ProcessName = deviceModule.ProcessName;
export type InjecteeID = deviceModule.InjecteeID;
export type FileDescriptor = deviceModule.FileDescriptor;
export type SpawnAddedHandler = deviceModule.SpawnAddedHandler;
export type SpawnRemovedHandler = deviceModule.SpawnRemovedHandler;
export type ChildAddedHandler = deviceModule.ChildAddedHandler;
export type ChildRemovedHandler = deviceModule.ChildRemovedHandler;
export type OutputHandler = deviceModule.OutputHandler;
export type UninjectedHandler = deviceModule.UninjectedHandler;
export type DeviceLostHandler = deviceModule.DeviceLostHandler;
export type DeviceType = deviceModule.DeviceType;
export declare const DeviceType: typeof deviceModule.DeviceType;
export type FrontmostQueryOptions = deviceModule.FrontmostQueryOptions;
export type ApplicationQueryOptions = deviceModule.ApplicationQueryOptions;
export type ProcessQueryOptions = deviceModule.ProcessQueryOptions;
export type ProcessMatchOptions = deviceModule.ProcessMatchOptions;
export type Scope = deviceModule.Scope;
export declare const Scope: typeof deviceModule.Scope;
export type SpawnOptions = deviceModule.SpawnOptions;
export type Stdio = deviceModule.Stdio;
export declare const Stdio: typeof deviceModule.Stdio;
export type TargetProcess = deviceModule.TargetProcess;
export type SessionOptions = deviceModule.SessionOptions;
export type Realm = deviceModule.Realm;
export declare const Realm: typeof deviceModule.Realm;
export type SystemParameters = systemParametersModule.SystemParameters;
export type SystemInterface = systemParametersModule.SystemInterface;
export type NetworkInterface = systemParametersModule.NetworkInterface;
export type CellularInterface = systemParametersModule.CellularInterface;
export type Session = sessionModule.Session;
export declare const Session: typeof sessionModule.Session;
export type SessionDetachedHandler = sessionModule.SessionDetachedHandler;
export type SessionDetachReason = sessionModule.SessionDetachReason;
export declare const SessionDetachReason: typeof sessionModule.SessionDetachReason;
export type PeerOptions = sessionModule.PeerOptions;
export type PortalOptions = sessionModule.PortalOptions;
export type Script = scriptModule.Script;
export declare const Script: typeof scriptModule.Script;
export type ScriptOptions = scriptModule.ScriptOptions;
export type SnapshotOptions = scriptModule.SnapshotOptions;
export type ScriptRuntime = scriptModule.ScriptRuntime;
export declare const ScriptRuntime: typeof scriptModule.ScriptRuntime;
export type ScriptDestroyedHandler = scriptModule.ScriptDestroyedHandler;
export type ScriptMessageHandler = scriptModule.ScriptMessageHandler;
export type ScriptLogHandler = scriptModule.ScriptLogHandler;
export type Message = scriptModule.Message;
export type MessageType = scriptModule.MessageType;
export declare const MessageType: typeof scriptModule.MessageType;
export type SendMessage = scriptModule.SendMessage;
export type ErrorMessage = scriptModule.ErrorMessage;
export type ScriptExports = scriptModule.ScriptExports;
export type LogLevel = scriptModule.LogLevel;
export declare const LogLevel: typeof scriptModule.LogLevel;
export type EnableDebuggerOptions = scriptModule.EnableDebuggerOptions;
export type Relay = relayModule.Relay;
export declare const Relay: typeof relayModule.Relay;
export type RelayProperties = relayModule.RelayProperties;
export type RelayKind = relayModule.RelayKind;
export declare const RelayKind: typeof relayModule.RelayKind;
export type PortalMembership = portalMembershipModule.PortalMembership;
export declare const PortalMembership: typeof portalMembershipModule.PortalMembership;
export type PortalService = portalServiceModule.PortalService;
export declare const PortalService: typeof portalServiceModule.PortalService;
export type PortalServiceOptions = portalServiceModule.PortalServiceOptions;
export type PortalConnectionId = portalServiceModule.PortalConnectionId;
export type PortalConnectionTag = portalServiceModule.PortalConnectionTag;
export type PortalNodeConnectedHandler = portalServiceModule.PortalNodeConnectedHandler;
export type PortalNodeJoinedHandler = portalServiceModule.PortalNodeJoinedHandler;
export type PortalNodeLeftHandler = portalServiceModule.PortalNodeLeftHandler;
export type PortalNodeDisconnectedHandler = portalServiceModule.PortalNodeDisconnectedHandler;
export type PortalControllerConnectedHandler = portalServiceModule.PortalControllerConnectedHandler;
export type PortalControllerDisconnectedHandler = portalServiceModule.PortalControllerDisconnectedHandler;
export type PortalAuthenticatedHandler = portalServiceModule.PortalAuthenticatedHandler;
export type PortalSubscribeHandler = portalServiceModule.PortalSubscribeHandler;
export type PortalMessageHandler = portalServiceModule.PortalMessageHandler;
export type EndpointParameters = endpointParametersModule.EndpointParameters;
export declare const EndpointParameters: typeof endpointParametersModule.EndpointParameters;
export type EndpointParametersSubset = endpointParametersModule.EndpointParametersSubset;
export type AuthenticationScheme = endpointParametersModule.AuthenticationScheme;
export type TokenAuthenticationScheme = endpointParametersModule.TokenAuthenticationScheme;
export type CallbackAuthenticationScheme = endpointParametersModule.CallbackAuthenticationScheme;
export type AuthenticationCallback = endpointParametersModule.AuthenticationCallback;
export type AuthenticatedSessionInfo = authenticationModule.AuthenticatedSessionInfo;
export type IOStream = iostreamModule.IOStream;
export declare const IOStream: typeof iostreamModule.IOStream;
export type Cancellable = cancellableModule.Cancellable;
export declare const Cancellable: typeof cancellableModule.Cancellable;
export type Application = applicationModule.Application;
export type ApplicationParameters = applicationModule.ApplicationParameters;
export type Process = processModule.Process;
export type ProcessParameters = processModule.ProcessParameters;
export type Spawn = spawnModule.Spawn;
export type Child = childModule.Child;
export type ChildOrigin = childModule.ChildOrigin;
export declare const ChildOrigin: typeof childModule.ChildOrigin;
export type Crash = crashModule.Crash;
export type CrashParameters = crashModule.CrashParameters;
export type Icon = iconModule.Icon;
export type RGBAIcon = iconModule.RGBAIcon;
export type PNGIcon = iconModule.PNGIcon;
export type Bus = busModule.Bus;
export declare const Bus: typeof busModule.Bus;
export type BusDetachedHandler = busModule.BusDetachedHandler;
export type BusMessageHandler = busModule.BusMessageHandler;
export type Service = serviceModule.Service;
export declare const Service: typeof serviceModule.Service;
export type ServiceCloseHandler = serviceModule.ServiceCloseHandler;
export type ServiceMessageHandler = serviceModule.ServiceMessageHandler;
export type SocketAddress = socketAddressModule.SocketAddress;
export type IPV4SocketAddress = socketAddressModule.IPV4SocketAddress;
export type IPV6SocketAddress = socketAddressModule.IPV6SocketAddress;
export type AnonymousUnixSocketAddress = socketAddressModule.AnonymousUnixSocketAddress;
export type PathUnixSocketAddress = socketAddressModule.PathUnixSocketAddress;
export type AbstractUnixSocketAddress = socketAddressModule.AbstractUnixSocketAddress;
export declare function querySystemParameters(cancellable?: Cancellable): Promise<SystemParameters>;
export declare function spawn(program: string | string[], options?: SpawnOptions, cancellable?: Cancellable): Promise<number>;
export declare function resume(target: number | string, cancellable?: Cancellable): Promise<void>;
export declare function kill(target: number | string, cancellable?: Cancellable): Promise<void>;
export declare function attach(target: TargetProcess, options?: SessionOptions, cancellable?: Cancellable): Promise<Session>;
export declare function injectLibraryFile(target: number | string, path: string, entrypoint: string, data: string, cancellable?: Cancellable): Promise<number>;
export declare function injectLibraryBlob(target: number | string, blob: Buffer, entrypoint: string, data: string, cancellable?: Cancellable): Promise<number>;
export declare function enumerateDevices(cancellable?: Cancellable): Promise<Device[]>;
export declare function getDeviceManager(): DeviceManager;
export declare function getLocalDevice(cancellable?: Cancellable): Promise<Device>;
export declare function getRemoteDevice(cancellable?: Cancellable): Promise<Device>;
export declare function getUsbDevice(options?: GetDeviceOptions, cancellable?: Cancellable): Promise<Device>;
export declare function getDevice(id: string, options?: GetDeviceOptions, cancellable?: Cancellable): Promise<Device>;
export interface GetDeviceOptions {
    timeout?: number | null;
}
